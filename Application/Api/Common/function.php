<?phpuse Common\Lib\Constants;	/**	 * 返回redis对象	 * @return [type] [description]	 */	function ConnRedis(){	    $redis = new \Redis();	    $redis -> connect(C('REDIS_HOST'),C('REDIS_PORT'));	    $redis -> auth(C('REDIS_AUTH'));	    return $redis;	}	/**	 * 生成订单号	 * @param  string $prefix 前缀	 * @return [type]         [description]	 */	function orderSN($prefix = ''){		$charid = strtoupper(md5(uniqid(mt_rand(), true)));		$uuid = $prefix.substr($charid, 0, 8).substr($charid, 8, 4).substr($charid,12, 4).substr($charid,16, 4).substr($charid,20,12);		return $uuid;	}	/**	 * 保留4位小数 不四舍五入	 * @return [type] [description]	 */	function floor4($float){		return floor($float * 10000) / 10000;	}	/**	 * 交易锁	 * @param str $key 锁键名	 */	function setLock($key, $act = 'add', $time = 0){		$redis = ConnRedis();		$time = $time == 0 ? 60 : $time;		if($act == 'add'){			$redis -> set($key, 1, $time);		}else{			$redis -> del($key);		}	}		/**	 * 检查锁	 * @param str $key 锁键名	 */	function checkLock($key){		$redis = ConnRedis();		return $redis -> get($key) ? true : false;	}	/**	 * 计划任务错误次数	 * @param str $key 锁键名	 * @param str $act 操作类型 get 获取次数 inc 递增1 reset 重置为0	 */	function planFail($key, $act = 'get'){		$redis = ConnRedis();		$num = $redis -> get($key);		switch ($act) {			case 'inc':					$num += 1;					$redis -> set($key, $num);				break;			case 'reset':					$num = 0;					$redis -> set($key, 0);				break;			case 'get':			default:					$num = $redis -> get($key);				break;		}		return $num;	}	/**	 * 获取最后表ID	 * @return [type] [description]	 */	function getLastTableID(){		$redis = ConnRedis();		return $redis->get(Constants::PLAN_CLOSE_MALL_LASTID);	}	/**	 * 设置最后表ID	 * @return [type] [description]	 */	function setLastTableID($id){		$redis = ConnRedis();		return $redis->set(Constants::PLAN_CLOSE_MALL_LASTID, $id, 300);	}		/**	 * 获取最后表ID	 * @return [type] [description]	 */	function getMemberLastID(){		$redis = ConnRedis();		return $redis->get(Constants::PLAN_MEMBER_LEVEL_LASTID);	}	/**	 * 设置最后表ID	 * @return [type] [description]	 */	function setMemberLastID($id){		$redis = ConnRedis();		return $redis->set(Constants::PLAN_MEMBER_LEVEL_LASTID, $id, 300);	}	 /**     * 图形验证码     * @param  string $signcode 机器码     * @return [type]           [description]     */    function valid_image(){        $sessionid = session_id();        $redis = ConnRedis();        $vcode = create_code(4);        $key  = 'img:'.md5($sessionid);        $data = $redis -> set( $key , strval($vcode) , Constants::IMAGE_CODE_EXPIRE_TIME);        getAuthImage($vcode);    }    /**     * 验证图形     * @param  string $validcode 验证码     * @return [type]            [description]     */    function valid_check($validcode){        $sessionid = session_id();        $redis = ConnRedis();        $key = 'img:'.md5($sessionid);        $val = $redis -> get($key);        if(strval($val) !== strval($validcode)){            return false;        }        //验证过自动删除        $redis -> del($key);        return true;    }?>